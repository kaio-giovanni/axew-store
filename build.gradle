plugins {
    id 'org.springframework.boot' version '2.4.5'
    id 'io.spring.dependency-management' version '1.0.11.RELEASE'
    id 'java'
    id 'name.remal.sonarlint' version '1.2.2'
    id 'com.github.jakemarsden.git-hooks' version '0.0.2'
}

check.dependsOn sonarlintMain

configurations {
    compileOnly {
        canBeResolved(true)
    }
}

group = 'com.virtual.soft'
version = '0.0.1-SNAPSHOT'
sourceCompatibility = '17'

repositories {
    mavenCentral()
}

dependencies {
    implementation 'org.springframework.boot:spring-boot-starter-web'
    implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
    implementation 'org.springframework.boot:spring-boot-starter-security'
    implementation 'org.springframework.boot:spring-boot-starter-validation'
    implementation group: 'io.jsonwebtoken', name: 'jjwt', version: '0.9.1'
    implementation 'io.github.cdimascio:java-dotenv:5.2.1'
    implementation 'org.springdoc:springdoc-openapi-ui:1.4.2'
    implementation 'io.sentry:sentry:3.1.0'

    implementation 'commons-logging:commons-logging:1.3.0'

    implementation group: 'com.amazonaws', name: 'aws-java-sdk-core', version: '1.12.686'
    implementation group: 'com.amazonaws', name: 'aws-java-sdk-s3', version: '1.12.686'
    implementation group: 'com.amazonaws', name: 'aws-java-sdk-lambda', version: '1.12.686'

    runtimeOnly 'mysql:mysql-connector-java'
    runtimeOnly 'com.h2database:h2'

    testImplementation 'org.springframework.boot:spring-boot-starter-test'
    testImplementation 'org.springframework.security:spring-security-test:5.3.3.RELEASE'
    testImplementation group: 'org.junit.jupiter', name: 'junit-jupiter-api', version: '5.7.0'
    testImplementation group: 'org.mockito', name: 'mockito-junit-jupiter', version: '3.7.7'

}

test {
    useJUnitPlatform()

    testLogging {
        exceptionFormat = 'full'
        events "passed", "skipped", "failed"
        showStandardStreams = (System.getenv('DEBUG') != null)
    }
}

sonarlint {
    ignoreFailures = false
    excludes {
        message 'java:S1104'
        message 'java:S3740'
        message 'java:S1068'
        message 'java:S4276'
        message 'java:S5976'
    }
}

gitHooks {
    hooks = ['pre-commit': 'check']
}

tasks.register('deploy', Exec) {
    workingDir "$projectDir"
    def stage = System.getenv('STAGE')
    def identity = System.getenv('SSH_IDENTITY_KEY')
    def runTests = System.getenv('RUN_TESTS')
    runTests = runTests != "false"
    def identityFile = ''

    if (identity != null) {
        def sshKeyLines = identity.split(',')
        identityFile = 'identity.pem'
        new File(identityFile).delete()
        File file = new File(identityFile)

        for (line in sshKeyLines) {
            file.withWriterAppend { o -> o.println line }
        }
    }

    commandLine "chmod", "+x", "deploy.sh"
    commandLine "sh", "-c", "./deploy.sh ${stage} ${runTests} ${identityFile}"
}