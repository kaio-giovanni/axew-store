plugins {
    id 'org.springframework.boot' version '2.4.5'
    id 'io.spring.dependency-management' version '1.0.11.RELEASE'
    id 'java'
    id 'name.remal.sonarlint' version '1.2.2'
    id 'com.github.jakemarsden.git-hooks' version '0.0.2'
}

configurations {
    compileOnly {
        canBeResolved(true)
    }
}

group = 'com.virtual.soft'
version = '0.0.1-SNAPSHOT'
sourceCompatibility = '11'

repositories {
    mavenCentral()
}

dependencies {
    implementation 'org.springframework.boot:spring-boot-starter-web'
    implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
    implementation 'org.springframework.boot:spring-boot-starter-security'
    implementation 'io.github.cdimascio:java-dotenv:5.2.1'
    implementation 'org.springdoc:springdoc-openapi-ui:1.4.2'
    implementation 'io.sentry:sentry:3.1.0'

    runtimeOnly 'mysql:mysql-connector-java'

    testImplementation 'org.springframework.boot:spring-boot-starter-test'
    testImplementation 'org.springframework.security:spring-security-test:5.3.3.RELEASE'
}

test {
    useJUnitPlatform()

    testLogging {
        exceptionFormat = 'full'
        events "passed", "skipped", "failed"
        showStandardStreams = (System.getenv('DEBUG') != null)
    }
}

sonarlint {
    ignoreFailures = false
    excludes {
        message 'java:S1104'
        message 'java:S3740'
        message 'java:S1068'
        message 'java:S4276'
        message 'java:S5976'
    }
}

gitHooks {
    hooks = ['pre-commit': 'check']
}

task deploy() {
    def stage = System.getenv('STAGE')

    if (stage != null) {
        println "Deploying project in STAGE $stage"
    }
}